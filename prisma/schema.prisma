// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  verificationToken String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  purchases         Purchase[]
  courseAccess      CourseAccess[]
  courseProgress    CourseProgress[]
  lessonProgress    LessonProgress[]
  userActivity      UserActivity[]
  learningGoals     LearningGoal[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  duration    String
  level       String
  imageUrl    String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  purchases   Purchase[]
  courseAccess CourseAccess[]
  chapters    Chapter[]
  courseProgress CourseProgress[]
  userActivity UserActivity[]
  learningGoals LearningGoal[]
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  amount    Float
  status    PurchaseStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model CourseAccess {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  grantedAt DateTime @default(now())
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Chapter {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  order     Int
  type      LessonType
  content   String
  chapterId String
  chapter   Chapter   @relation(fields: [chapterId], references: [id])
  lessonProgress LessonProgress[]
  userActivity UserActivity[]
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
}

model CourseProgress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0)
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  lessonProgress LessonProgress[]

  @@unique([userId, courseId])
}

model LessonProgress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  courseProgress CourseProgress @relation(fields: [userId, courseId], references: [userId, courseId])
  courseId  String

  @@unique([userId, lessonId])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  lessonId  String
  activityType ActivityType
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@index([userId, createdAt])
}

enum ActivityType {
  LESSON_STARTED
  LESSON_COMPLETED
  QUIZ_ATTEMPTED
  QUIZ_COMPLETED
}

model LearningGoal {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  title       String
  description String?
  targetDate  DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])

  @@index([userId, completed])
}

